{"version":3,"sources":["module/Home/index.js","module/Categories/index.js","module/OutBlog/index.js","module/Contacts/index.js","App.js","serviceWorker.js","index.js"],"names":["Home","className","Categories","OutBlog","Contact","App","fetch","then","res","json","gists","console","log","activeStyle","color","to","class","href","title","path","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"0TAYeA,MARf,WACI,OACI,yBAAKC,UAAU,eCGRC,MAPf,WACI,OACI,6BACI,kDCKGC,MARf,WACI,OACI,6BACI,+CCKGC,MARf,WACI,OACI,6BACI,gDC4DGC,E,kLAvDXC,MAAM,gCACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJC,QAAQC,IAAIF,Q,+BAKhB,OACE,kBAAC,IAAD,KACE,yBAAKT,UAAU,UACb,yBAAKA,UAAU,UACb,yBAAKA,UAAU,QACb,wBAAIA,UAAU,WACZ,wBAAIA,UAAU,WACZ,kBAAC,IAAD,CAASA,UAAU,WAAWY,YAAa,CAAEC,MAAO,OAASC,GAAG,SAAhE,SACF,wBAAId,UAAU,WACZ,kBAAC,IAAD,CAASA,UAAU,mBAAmBY,YAAa,CAAEC,MAAO,OAASC,GAAG,eAAxE,cACA,wBAAIC,MAAM,WACR,4BAAI,uBAAGC,KAAK,IAAIC,MAAM,YAAlB,aACJ,4BAAI,uBAAGD,KAAK,IAAIC,MAAM,YAAlB,eACJ,4BAAI,uBAAGD,KAAK,IAAIC,MAAM,YAAlB,iBAGR,wBAAIjB,UAAU,WACZ,kBAAC,IAAD,CAASA,UAAU,WAAWY,YAAa,CAAEC,MAAO,OAASC,GAAG,SAAhE,aACF,wBAAId,UAAU,WACZ,kBAAC,IAAD,CAASA,UAAU,WAAWY,YAAa,CAAEC,MAAO,OAASC,GAAG,aAAhE,gBAKR,yBAAKd,UAAU,WACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOkB,KAAK,SACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,eACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,SACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,aACV,kBAAC,EAAD,e,GA/CEC,IAAMC,WCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3B,MAAK,SAAA4B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,c","file":"static/js/main.29057ed9.chunk.js","sourcesContent":["import React from 'react';\r\nimport './style.css'\r\n// import images from '../../../public/images/images'\r\n\r\nfunction Home() {\r\n    return (\r\n        <div className=\"container\">\r\n         \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home","import React from 'react';\r\n\r\nfunction Categories() {\r\n    return (\r\n        <div>\r\n            <p>Day la categories</p>\r\n        </div>\r\n    )\r\n}\r\nexport default Categories","import React from 'react';\r\n\r\nfunction OutBlog() {\r\n    return (\r\n        <div>\r\n            <p>Day la OutBlog</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default OutBlog","import React from 'react';\r\n\r\nfunction Contact() {\r\n    return (\r\n        <div>\r\n            <p>Day la Contacts</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Contact","import React from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Route, Link, NavLink, Switch } from \"react-router-dom\"\nimport Home from './module/Home'\nimport Categories from './module/Categories'\nimport OutBlog from './module/OutBlog'\nimport Contact from './module/Contacts'\nclass App extends React.Component {\n\n  componentDidMount() {\n    fetch('https://api.github.com/gists')\n      .then(res => res.json())\n      .then(gists => {\n        console.log(gists)\n      })\n  }\n\n  render() {\n    return (\n      <Router>\n        <div className=\"parent\">\n          <div className=\"header\">\n            <div className=\"menu\">\n              <ul className=\"menu-ul\">\n                <li className=\"menu-li\" >\n                  <NavLink className=\"nav_link\" activeStyle={{ color: 'red' }} to=\"/home\">Home</NavLink ></li>\n                <li className=\"menu-li\" >\n                  <NavLink className=\"nav_link_submenu\" activeStyle={{ color: 'red' }} to=\"/categories\">Categories</NavLink >\n                  <ul class='submenu'>\n                    <li><a href=\"#\" title=\"Sub Menu\">Sub Menu</a></li>\n                    <li><a href=\"#\" title=\"Sub Menu\">Sub Menu 2</a></li>\n                    <li><a href=\"#\" title=\"Sub Menu\">Sub Menu 3</a></li>\n                  </ul>\n                  </li>\n                <li className=\"menu-li\" >\n                  <NavLink className=\"nav_link\" activeStyle={{ color: 'red' }} to=\"/blog\">Our Blog</NavLink ></li>\n                <li className=\"menu-li\" >\n                  <NavLink className=\"nav_link\" activeStyle={{ color: 'red' }} to=\"/contacts\">Contacts</NavLink >\n                </li>\n              </ul>\n            </div>\n          </div>\n          <div className=\"content\">\n            <Switch>\n              <Route path=\"/blog\">\n                <OutBlog />\n              </Route>\n              <Route path=\"/categories\">\n                <Categories />\n              </Route>\n              <Route path=\"/home\">\n                <Home />\n              </Route>\n              <Route path=\"/contacts\">\n                <Contact />\n              </Route>\n            </Switch>\n          </div>\n        </div>\n      </Router>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}